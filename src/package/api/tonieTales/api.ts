/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
    DUMMY_BASE_URL,
    assertParamExists,
    setApiKeyToObject,
    setBasicAuthToObject,
    setBearerAuthToObject,
    setOAuthToObject,
    setSearchParams,
    serializeDataIfNeeded,
    toPathString,
    createRequestFunction,
} from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import {
    BASE_PATH,
    COLLECTION_FORMATS,
    BaseAPI,
    RequiredError,
    operationServerMap,
} from './base';

/**
 *
 * @export
 * @interface Tale
 */
export interface Tale {
    /**
     *
     * @type {string}
     * @memberof Tale
     */
    content?: string;
}
/**
 *
 * @export
 * @interface TaleInfo
 */
export interface TaleInfo {
    /**
     *
     * @type {string}
     * @memberof TaleInfo
     */
    mainCharacter?: string;
    /**
     *
     * @type {number}
     * @memberof TaleInfo
     */
    duration?: number;
    /**
     *
     * @type {string}
     * @memberof TaleInfo
     */
    targetAge?: TaleInfoTargetAgeEnum;
    /**
     *
     * @type {string}
     * @memberof TaleInfo
     */
    theme?: TaleInfoThemeEnum;
}

export const TaleInfoTargetAgeEnum = {
    Toddler: 'TODDLER',
    Preschooler: 'PRESCHOOLER',
    Schoolage: 'SCHOOLAGE',
} as const;

export type TaleInfoTargetAgeEnum =
    (typeof TaleInfoTargetAgeEnum)[keyof typeof TaleInfoTargetAgeEnum];
export const TaleInfoThemeEnum = {
    FriendshipTeamwork: 'FRIENDSHIP_TEAMWORK',
    CourageBravery: 'COURAGE_BRAVERY',
    KindnessCompassion: 'KINDNESS_COMPASSION',
    ImaginationCreativity: 'IMAGINATION_CREATIVITY',
    ExplorationDiscovery: 'EXPLORATION_DISCOVERY',
    FamilyBelonging: 'FAMILY_BELONGING',
    OvercomingChallenges: 'OVERCOMING_CHALLENGES',
    MagicWonder: 'MAGIC_WONDER',
    RespectNature: 'RESPECT_NATURE',
    LearningLifeLessons: 'LEARNING_LIFE_LESSONS',
} as const;

export type TaleInfoThemeEnum =
    (typeof TaleInfoThemeEnum)[keyof typeof TaleInfoThemeEnum];

/**
 * TalesControllerApi - axios parameter creator
 * @export
 */
export const TalesControllerApiAxiosParamCreator = function (
    configuration?: Configuration,
) {
    return {
        /**
         *
         * @param {TaleInfo} taleInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewTale: async (
            taleInfo: TaleInfo,
            options: RawAxiosRequestConfig = {},
        ): Promise<RequestArgs> => {
            // verify required parameter 'taleInfo' is not null or undefined
            assertParamExists('createNewTale', 'taleInfo', taleInfo);
            const localVarPath = `/api/create-new-tale`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {
                method: 'POST',
                ...baseOptions,
                ...options,
            };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            };
            localVarRequestOptions.data = serializeDataIfNeeded(
                taleInfo,
                localVarRequestOptions,
                configuration,
            );

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * TalesControllerApi - functional programming interface
 * @export
 */
export const TalesControllerApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator =
        TalesControllerApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {TaleInfo} taleInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewTale(
            taleInfo: TaleInfo,
            options?: RawAxiosRequestConfig,
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tale>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.createNewTale(
                    taleInfo,
                    options,
                );
            const localVarOperationServerIndex =
                configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath =
                operationServerMap['TalesControllerApi.createNewTale']?.[
                    localVarOperationServerIndex
                ]?.url;
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration,
                )(axios, localVarOperationServerBasePath || basePath);
        },
    };
};

/**
 * TalesControllerApi - factory interface
 * @export
 */
export const TalesControllerApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    const localVarFp = TalesControllerApiFp(configuration);
    return {
        /**
         *
         * @param {TaleInfo} taleInfo
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewTale(
            taleInfo: TaleInfo,
            options?: RawAxiosRequestConfig,
        ): AxiosPromise<Tale> {
            return localVarFp
                .createNewTale(taleInfo, options)
                .then((request) => request(axios, basePath));
        },
    };
};

/**
 * TalesControllerApi - object-oriented interface
 * @export
 * @class TalesControllerApi
 * @extends {BaseAPI}
 */
export class TalesControllerApi extends BaseAPI {
    /**
     *
     * @param {TaleInfo} taleInfo
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TalesControllerApi
     */
    public createNewTale(taleInfo: TaleInfo, options?: RawAxiosRequestConfig) {
        return TalesControllerApiFp(this.configuration)
            .createNewTale(taleInfo, options)
            .then((request) => request(this.axios, this.basePath));
    }
}
